#include<stdio.h>
#include<conio.h>

typedef struct threadTree ThTree;

struct threadTree
{
    int data;
    ThTree *left;
    ThTree *right;
    int lthread,rthread;
};

ThTree *current;
ThTree *root;

ThTree *insert(int data)
{
   ThTree *temp = root;
   ThTree *temp2 = NULL;
   while(temp != NULL)
   {
       temp2 = temp;
       if(data < temp->data)
       {
           if(temp->lthread == 0)
            temp = temp->left;
           else
            break;
       }
       else
       {
           if(temp->rthread == 0)
            temp = temp->right;
           else
            break;
       }
   }
   ThTree *current = (ThTree *)malloc(sizeof(ThTree));
   current->data = data;
   current->lthread = 1;
   current->rthread = 1;

   if(temp2 == NULL)
   {
       root = current;
       current->left = NULL;
       current->right = NULL;
   }
   else if(data < temp2->data)
   {
       current->left = temp2->left;
       current->right = temp2;
       temp2->lthread = 0;
       temp2->left = current;
   }
   else
   {
       current->left = temp2;
       current->right = temp2->right;
       temp2->rthread = 0;
       temp2->right = current;
   }
   return root;
}

ThTree *Successor(ThTree *ptr)
{
    if (ptr->rthread == 1)
        return ptr->right;
    ptr = ptr->right;
    while(ptr->lthread == 0)
        ptr = ptr->left;
    return ptr;
}

ThTree *Predecessor(ThTree *ptr)
{
   if (ptr->lthread == 1)
        return ptr->left;
    ptr = ptr->left;
    while(ptr->rthread == 0)
        ptr = ptr->right;
    return ptr;
}


void inorder(ThTree *root)
{
    if (root == NULL)
        printf("Tree Is Empty");
    ThTree *ptr = root;
    while (ptr->lthread == 0)
        ptr = ptr->left;
    while (ptr != NULL)
    {
        printf("%d\n",ptr->data);
        ptr = Successor(ptr);
    }
}

void preorder(ThTree *root)
{
    /*int right = 0;
    if(root == NULL)
        printf("Tree Is Empty ");
    ThTree *ptr = root;
    while(ptr != NULL)
    {
        printf("%d\n",ptr->data);
        if(ptr->left != NULL)
            ptr = ptr->left;
        else if(ptr->rthread == 0)
            ptr = ptr->right;
        else
        {
            while(ptr->right == NULL && ptr->rthread == 1)
                ptr = ptr->right;
            if(ptr->right == NULL)
                break;
            else
                ptr = ptr->right;
        }
    }*/
    printf("%d\n",root->data);
    if (root->lthread != 1)
        preorder(root->left);                  //Using Recursion
    if (root->rthread != 1)
        preorder(root->right);
}

void postorder(ThTree *root)
{
    /*int right = 0;
    if(root == NULL)
        printf("Tree Is Empty ");
    ThTree *ptr = root;
    while(ptr->lthread == 0)
        ptr = ptr->left;
    while(ptr != root)
    {
        if(right == 1)
        {
            printf("%d\n",ptr->data);
            ptr = Predecessor(ptr);
        }
        right = 0;
        printf("%d\n",ptr->data);
        if(ptr != root)
        {
            ptr = Successor(ptr);
            if(ptr->rthread == 0)
            {
                ptr = ptr->right;
                right = 1;
            }
        }
    }*/
    if (root->lthread != 1)
        preorder(root->left);
    if (root->rthread != 1)       //Using Recursion
        preorder(root->right);
    printf("%d\n",root->data);
}

int main()
{
    int choice,data,ch = 0;
    do
    {
        printf("1.Insert\n2.Display Inorder\n3.Display Preorder\n4.Display PostOrder\n5.Exit\n\nChoice : ");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            printf("Enter Data : ");
            scanf("%d",&data);
            root = insert(data);
            break;
        case 2:
            inorder(root);
            break;
        case 3:
            preorder(root);
            break;
        case 4:
            postorder(root);
            break;
        case 5:
            ch++;
        }
    }while(ch != 1);
    return 0;
}
